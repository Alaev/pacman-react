{"version":3,"sources":["components/Sprite.tsx","components/PacMac.tsx","components/Ghost.tsx","components/Types.ts","pages/SpriteTestPage/SpriteTestPage.tsx","pages/HomePage/HomePage.tsx","pages/MazeTestPage/MazeTestPage.tsx","pages/AnimationTestPage/AnimationTestPage.tsx","Routes.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Sprite","spriteName","name","x","y","className","classNames","style","transform","PacManPhases","PacMan","direction","phase","Ghost","ghostNumber","GhostNumbers","GhostPhases","Directions","SpriteTestPage","useState","setPhase","directionIndex","setDirectionIndex","useEffect","timerId","setInterval","clearInterval","map","ghostPhase","key","pacManPhase","HomePage","MazeTestPage","AnimationTestPage","observer","store","useLocalStore","vx","gameRunning","update","timestamp","Math","round","stopGame","useMyLocalStore","animationStep","window","requestAnimationFrame","Routes","textAlign","to","path","exact","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e3ff398d.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport classNames from \"classnames\";\n\nexport const Sprite: FC<{\n  name: string;\n  x: number;\n  y: number;\n  className?: string | null;\n}> = ({ name: spriteName, x, y, className = null }) => {\n  return (\n    <div\n      className={classNames(\"Sprite\", \"Sprite-\" + spriteName, className)}\n      style={{\n        transform: `translate(${x}px, ${y}px) scale(3)`\n      }}\n    />\n  );\n};\n","import React, { FC } from \"react\";\nimport { Sprite } from \"./Sprite\";\nimport { Direction } from \"./Types\";\n\nexport type PacManPhase = 0 | 1;\n\nexport const PacManPhases: PacManPhase[] = [0, 1];\n\ntype PacManProps = {\n  direction: Direction;\n  phase: PacManPhase;\n  x: number;\n  y: number;\n};\n\nexport const PacMan: FC<PacManProps> = ({ direction, phase, x, y }) => {\n  return (\n    <Sprite\n      className=\"Sprite-pacman\"\n      name={`pacman-direction-${direction}-phase-${phase}`}\n      x={x}\n      y={y}\n    />\n  );\n};\n","import React, { FC } from \"react\";\nimport { Direction } from \"./Types\";\nimport { Sprite } from \"./Sprite\";\n\nexport type GhostNumber = 0 | 1 | 2 | 3;\nexport type GhostPhase = 0 | 1;\n\ntype GhostProps = {\n  direction: Direction;\n  phase: GhostPhase;\n  x: number;\n  y: number;\n  ghostNumber: number;\n};\n\nexport const Ghost: FC<GhostProps> = ({\n  direction,\n  phase,\n  x,\n  y,\n  ghostNumber\n}) => (\n  <Sprite\n    className=\"Sprite-ghost\"\n    name={`ghost-${ghostNumber}-direction-${direction}-phase-${phase}`}\n    x={x}\n    y={y}\n  />\n);\n\nexport const GhostNumbers: GhostNumber[] = [0, 1, 2, 3];\nexport const GhostPhases: GhostPhase[] = [0, 1];\n","import \"react\";\n\nexport type Direction = \"UP\" | \"DOWN\" | \"RIGHT\" | \"LEFT\";\n\nexport const Directions: Direction[] = [\"UP\", \"DOWN\", \"LEFT\", \"RIGHT\"];\n","import React, { useEffect, useState } from \"react\";\nimport { PacManPhase, PacManPhases, PacMan } from \"../../components/PacMac\";\nimport {\n  GhostNumber,\n  GhostNumbers,\n  GhostPhases,\n  GhostPhase,\n  Ghost\n} from \"../../components/Ghost\";\nimport { Directions, Direction } from \"../../components/Types\";\n\nexport const SpriteTestPage: React.FC = () => {\n  const [phase, setPhase] = useState<PacManPhase>(0);\n  const [directionIndex, setDirectionIndex] = useState<number>(0);\n\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setPhase((phase: PacManPhase) => (phase === 0 ? 1 : 0));\n    }, 300);\n    return () => {\n      clearInterval(timerId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    const timerId = setInterval(() => {\n      setDirectionIndex((directionIndex: number) =>\n        directionIndex === 3 ? 0 : directionIndex + 1\n      );\n    }, 1000);\n    return () => {\n      clearInterval(timerId);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const direction = Directions[directionIndex];\n  return (\n    <div className=\"Maze\">\n      {GhostNumbers.map((ghostNumber: GhostNumber) =>\n        Directions.map((direction: Direction, directionIndex: number) =>\n          GhostPhases.map((ghostPhase: GhostPhase) => (\n            <Ghost\n              key={ghostPhase}\n              direction={direction}\n              phase={ghostPhase}\n              x={30 + directionIndex * 160 + ghostPhase * 80}\n              y={0 + ghostNumber * 60}\n              ghostNumber={ghostNumber}\n            />\n          ))\n        )\n      )}\n\n      {Directions.map((direction: Direction, directionIndex: number) =>\n        PacManPhases.map((pacManPhase: PacManPhase) => (\n          <PacMan\n            key={pacManPhase}\n            direction={direction}\n            phase={pacManPhase}\n            x={30 + directionIndex * 160 + pacManPhase * 80}\n            y={270}\n          />\n        ))\n      )}\n\n      <PacMan direction={direction} phase={phase} x={30} y={400} />\n\n      {GhostNumbers.map(ghostNumber => (\n        <Ghost\n          key={ghostNumber}\n          direction={direction}\n          phase={phase}\n          x={30 + ghostNumber * 80}\n          y={480}\n          ghostNumber={ghostNumber}\n        />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\n\nexport const HomePage: React.FC = () => {\n  return (\n    <div>\n      <h1>Pac Man</h1>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Sprite } from \"../../components/Sprite\";\n\nexport const MazeTestPage: React.FC = () => {\n  return (\n    <div>\n      <Sprite className=\"Sprite-maze\" name=\"maze-state-full\" x={0} y={0} />;\n      <Sprite\n        className=\"Sprite-maze\"\n        name=\"maze-state-empty\"\n        x={0}\n        y={250 * 4}\n      />\n      ;\n    </div>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport { Ghost, GhostPhase } from \"../../components/Ghost\";\nimport { useLocalStore, observer } from \"mobx-react-lite\";\n\nconst SPEED = 2;\n\nconst useMyLocalStore = () => {\n  const store = useLocalStore(() => ({\n    x: 0,\n    vx: SPEED,\n    phase: 0,\n    gameRunning: true,\n\n    update(timestamp: number) {\n      store.x += store.vx;\n      if (store.x > 200) {\n        store.vx = -1 * SPEED;\n      }\n      if (store.x <= 0) {\n        store.vx = 1 * SPEED;\n      }\n      store.phase = Math.round(timestamp / 300) % 2;\n    },\n\n    stopGame() {\n      store.gameRunning = false;\n    }\n  }));\n  return store;\n};\n\nexport const AnimationTestPage: React.FC = observer(() => {\n  const store = useMyLocalStore();\n\n  const animationStep = (timestamp: number) => {\n    store.update(timestamp);\n    if (store.gameRunning) {\n      window.requestAnimationFrame(animationStep);\n    }\n  };\n\n  useEffect(() => {\n    window.requestAnimationFrame(animationStep);\n    return store.stopGame;\n  }, []);\n  return (\n    <div>\n      <Ghost\n        key={0}\n        direction={store.vx > 0 ? \"RIGHT\" : \"LEFT\"}\n        phase={store.phase as GhostPhase}\n        x={store.x}\n        y={480}\n        ghostNumber={0}\n      />\n    </div>\n  );\n});\n","import React, { Fragment } from \"react\";\n\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nimport { SpriteTestPage } from \"./pages/SpriteTestPage/SpriteTestPage\";\nimport { HomePage } from \"./pages/HomePage/HomePage\";\nimport { MazeTestPage } from \"./pages/MazeTestPage/MazeTestPage\";\nimport { AnimationTestPage } from \"./pages/AnimationTestPage/AnimationTestPage\";\n\nexport const Routes: React.FC = () => {\n  return (\n    <Fragment>\n      <p style={{ textAlign: \"right\" }}>\n        <Link to=\"/\">Home</Link> <Link to=\"/sprites\">Sprites</Link>{\" \"}\n        <Link to=\"/maze\">Maze</Link> <Link to=\"/animation\">Animation</Link>\n        <br />\n      </p>\n\n      <Switch>\n        <Route path=\"/\" exact>\n          <HomePage />\n        </Route>\n        <Route path=\"/sprites\">\n          <SpriteTestPage />\n        </Route>\n        <Route path=\"/maze\">\n          <MazeTestPage />\n        </Route>\n        <Route path=\"/animation\">\n          <AnimationTestPage />\n        </Route>\n      </Switch>\n    </Fragment>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"normalize.css\";\nimport \"./App.css\";\nimport { Routes } from \"./Routes\";\n\nconst App: React.FC = () => {\n  return (\n    <Router>\n      <Routes />\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}